#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class QueueLinkedList {
private:
    Node *front, *rear;

public:
    QueueLinkedList() {
        front = nullptr;
        rear = nullptr;
    }
    void enqueue(int value) {
        Node* newNode = new Node(value);
        if (rear == nullptr) {
            front = rear = newNode;
            cout << value << " enqueued to the queue." << endl;
            return;
        }
        rear->next = newNode;
        rear = newNode;
        cout << value << " enqueued to the queue." << endl;
    }
    void dequeue() {
        if (front == nullptr) {
            cout << "Queue Underflow!" << endl;
            return;
        }
        Node* temp = front;
        cout << front->data << " dequeued from the queue." << endl;
        front = front->next;
        if (front == nullptr) rear = nullptr; // Reset rear if queue is empty
        delete temp;
    }
    void display() {
        if (front == nullptr) {
            cout << "Queue is empty." << endl;
            return;
        }
        cout << "Queue elements: ";
        Node* temp = front;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    QueueLinkedList q;

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.display();

    q.dequeue();
    q.display();

    return 0;
}
